# Generated by Selenium IDE
import pytest
import time
import json
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDemo():

  def setup_method(self, method):
    # test_demo_local4.pyからほぼ書き換え
    # 環境変数読み込み
    browser = os.environ['BROWSER']
    hostname = os.environ['HUB_HOST']
    app_url = os.environ['APP_URL']
    # selenium gridのURLを設定
    command_executor = "http://" + hostname + ":4444/wd/hub"
    # 環境変数からブラウザにあったオプションを設定
    if browser == "firefox":
      options = webdriver.FirefoxOptions()
    elif browser == "edge":
      options = webdriver.EdgeOptions()
      options.user_chromium = True
    else: #Chrome
      options = webdriver.ChromeOptions()

    options.set_capability("se:timerZone", "JST")

    self.driver = webdriver.Remote(
      command_executor=command_executor,
      options=options,
    )
    self.driver.set_window_size(1024,768)
    self.driver.get(app_url)

  def teardown_method(self, method):
    self.driver.quit()

  def test_demo(self):
    # test_demo_local4.pyのtest_demoをコピーし、一部コメントアウト

    # self.driver.get("http://localhost:8080/selenium-demo/")
    # self.driver.set_window_size(579, 705)

    # Selenium gridからブラウザ操作画面を見るための猶予時間を設定(開く前にテストが終了してしまうのを防ぐ)
    time.sleep(10)
    self.driver.find_element(By.ID, "add-new-item").click()
    time.sleep(1)
    #assert self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(1)").text == "品名を入力してください"
    assert self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(1)").text == "名前を入力してください"
    assert self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2)").text == "個数を入力してください"
    self.driver.save_screenshot("./results/test1.png")
    self.driver.find_element(By.ID, "new-item-name").click()
    self.driver.find_element(By.ID, "new-item-name").send_keys("ぶどう")
    self.driver.find_element(By.ID, "new-item-amount").send_keys("-1")
    self.driver.find_element(By.CSS_SELECTOR, "html").click()
    self.driver.find_element(By.ID, "add-new-item").click()
    time.sleep(1)
    #assert self.driver.find_element(By.CSS_SELECTOR, "li").text == "個数は1以上の整数を指定してください"
    assert self.driver.find_element(By.CSS_SELECTOR, "li").text == "個数は0以上の整数を指定してください"
    self.driver.save_screenshot("./results/test2.png")
    self.driver.find_element(By.ID, "new-item-amount").click()
    self.driver.find_element(By.ID, "new-item-amount").clear()
    self.driver.find_element(By.ID, "new-item-amount").send_keys("1")
    self.driver.find_element(By.ID, "add-new-item").click()
    time.sleep(1)
    assert self.driver.find_element(By.ID, "item-table:2:tabel-item-").text == "ぶどう"
    #assert self.driver.find_element(By.ID, "item-table:2:table-item-").text == "1"
    assert self.driver.find_element(By.ID, "item-table:2:table-item-").text == "100"
    self.driver.save_screenshot("./results/test3.png")
